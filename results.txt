Timer unit: 1e-06 s

Total time: 0.69719 s
File: /home/iteki/Asahi/endpoints/bancho.py
Function: root_client at line 218

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   218                                           @bancho.route("/", methods=['POST']) # only accept POST requests, we can assume it is for a login request but we can deny access if not
   219                                           @profile
   220                                           async def root_client():
   221        11         80.0      7.3      0.0      start = time.time()
   222        11        220.0     20.0      0.0      headers = request.headers # request headers, used for things such as user ip and agent
   223                                           
   224        11        261.0     23.7      0.0      if 'User-Agent' not in headers or headers['User-Agent'] != 'osu!':
   225                                                   # request isn't sent from osu client, return html
   226                                                   message = f"{pyfiglet.figlet_format(f'Asahi v{glob.version}')}\n\ntsunyoku attempts bancho v2, gone right :sunglasses:"
   227                                                   return Response(message, mimetype='text/plain')
   228                                           
   229        11        137.0     12.5      0.0      if 'osu-token' not in headers: # sometimes a login request will be a re-connect attempt, in which case they will already have a token, if not: login the user
   230         2        287.0    143.5      0.0          data = await request.data # request data, used to get info such as username to login the user
   231         2         15.0      7.5      0.0          if len(info := data.decode().split('\n')[:-1]) != 3: # format data so we can use it easier & also ensure it is valid at the same time
   232                                                       resp = await make_response(packets.userID(-2)) # -2 userid informs client it is too old | i assume that is the only valid reason for this to happen
   233                                                       resp.headers['cho-token'] = 'no' # client knows there is something up if we set token to 'no'
   234                                                       return resp
   235                                           
   236         2          8.0      4.0      0.0          if len(cinfo := info[2].split('|')) != 5: # format client data (hash, utc etc.) & ensure it is valid
   237                                                       resp = await make_response(packets.userID(-2)) # -2 userid informs client it is too old
   238                                                       resp.headers['cho-token'] = 'no' # client knows there is something up if we set token to 'no'
   239                                                       return resp
   240                                           
   241         2          5.0      2.5      0.0          username = info[0]
   242         2          6.0      3.0      0.0          pw = info[1].encode() # password in md5 form, we will use this to compare against db's stored bcrypt later
   243                                           
   244         2       1030.0    515.0      0.1          user = await glob.db.fetch('SELECT id, pw, country, name, priv FROM users WHERE name = %s', [username])
   245         2          8.0      4.0      0.0          if not user: # ensure user actually exists before attempting to do anything else
   246                                                       if glob.config.debug:
   247                                                           log(f'User {username} does not exist.', Ansi.LRED)
   248                                                       resp = await make_response(packets.userID(-1)) # -1 userid informs client of an auth error
   249                                                       resp.headers['cho-token'] = 'no' # client knows there is something up if we set token to 'no'
   250                                                       return resp
   251                                           
   252         2          8.0      4.0      0.0          bcache = glob.cache['bcrypt'] # get our cached bcrypts to potentially enhance speed
   253         2          7.0      3.5      0.0          pw_bcrypt = user['pw'].encode()
   254         2          6.0      3.0      0.0          if pw_bcrypt in bcache:
   255                                                       if pw != bcache[pw_bcrypt]: # compare provided md5 with the stored (cached) bcrypt to ensure they have provided the correct password
   256                                                           if glob.config.debug:
   257                                                               log(f"{username}'s login attempt failed: provided an incorrect password", Ansi.LRED)
   258                                                           resp = await make_response(packets.userID(-1))
   259                                                           resp.headers['cho-token'] = 'no'
   260                                                           return resp
   261                                                   else:
   262         2     682868.0 341434.0     97.9              if not bcrypt.checkpw(pw, pw_bcrypt): # compare provided md5 with the stored bcrypt to ensure they have provided the correct password
   263                                                           if glob.config.debug:
   264                                                               log(f"{username}'s login attempt failed: provided an incorrect password", Ansi.LRED)
   265                                                           resp = await make_response(packets.userID(-1))
   266                                                           resp.headers['cho-token'] = 'no'
   267                                                           return resp
   268                                                       
   269         2         12.0      6.0      0.0              bcache[pw_bcrypt] = pw # cache pw for future
   270                                           
   271         2        174.0     87.0      0.0          if not user['priv'] & Privileges.Normal:
   272                                                       resp = await make_response(packets.userID(-3)) # banned packet
   273                                                       resp.headers['cho-token'] = 'no'
   274                                                       return resp
   275                                           
   276         2         89.0     44.5      0.0          token = uuid.uuid4() # generate token for client to use as auth
   277         2         12.0      6.0      0.0          user['offset'] = int(cinfo[1]) # utc offset for time
   278         2          6.0      3.0      0.0          user['bot'] = False # used to specialise bot functions, kinda gay setup ngl
   279         2         29.0     14.5      0.0          user['token'] = str(token) # this may be useful in the future
   280         2         12.0      6.0      0.0          user['ltime'] = time.time() # useful for handling random logouts
   281         2          4.0      2.0      0.0          user['md5'] = pw # used for auth on /web/
   282         2         27.0     13.5      0.0          ip = headers['X-Forwarded-For']
   283                                           
   284                                                   # cache ip's geoloc | the speed gains too are ungodly
   285         2          9.0      4.5      0.0          if not glob.geoloc.get(ip):
   286         2       3854.0   1927.0      0.6              geoloc = reader.city(ip)
   287         2          8.0      4.0      0.0              glob.geoloc[ip] = geoloc
   288                                                   else:
   289                                                       geoloc = glob.geoloc[ip]
   290                                           
   291         2          9.0      4.5      0.0          user['country_iso'], user['lat'], user['lon'] = (geoloc.country.iso_code, geoloc.location.latitude, geoloc.location.longitude)
   292         2          8.0      4.0      0.0          user['country'] = country_codes[user['country_iso']]
   293                                           
   294                                                   # set player object
   295         2       1154.0    577.0      0.2          p = await Player.login(user)
   296         2        738.0    369.0      0.1          await p.set_stats()
   297                                           
   298         2         49.0     24.5      0.0          if not p.priv & Privileges.Verified:
   299                                                       if p.id == 3:
   300                                                           # first user & not verified, give all permissions
   301                                                           await p.set_priv(Privileges.Master)
   302                                           
   303                                                       await glob.db.execute('UPDATE users SET country = %s WHERE id = %s', [user['country_iso'].lower(), user['id']]) # set country code in db
   304                                                       await p.add_priv(Privileges.Verified) # verify user
   305                                                       log(f'{p.name} has been successfully verified.', Ansi.LBLUE)
   306                                           
   307         2         51.0     25.5      0.0          data = bytearray(packets.userID(p.id)) # initiate login by providing the user's id
   308         2         16.0      8.0      0.0          data += packets.protocolVersion(19) # no clue what this does
   309         2        192.0     96.0      0.0          data += packets.banchoPrivileges(p.client_priv | ClientPrivileges.Supporter)
   310         2        325.0    162.5      0.0          data += (packets.userPresence(p) + packets.userStats(p)) # provide user & other user's presence/stats (for f9 + user stats)
   311         2         13.0      6.5      0.0          data += packets.channelInfoEnd() # no clue what this does either
   312         2         22.0     11.0      0.0          data += packets.menuIcon() # set main menu icon
   313         2         30.0     15.0      0.0          data += packets.friends(p.friends) # send user friend list
   314         2         21.0     10.5      0.0          data += packets.silenceEnd(0) # force to 0 for now since silences arent a thing
   315                                           
   316                                                   # get channels from cache and send to user
   317         6         22.0      3.7      0.0          for chan in glob.channels.values():
   318         4         12.0      3.0      0.0              if chan.auto:
   319         2        860.0    430.0      0.1                  p.join_chan(chan)
   320         2         48.0     24.0      0.0                  data += packets.channelJoin(chan.name) # only join user to channel if the channel is meant for purpose
   321                                           
   322         4         96.0     24.0      0.0              data += packets.channelInfo(chan) # regardless of whether the channel should be auto-joined we should make the client aware of it
   323                                           
   324                                                   # add user to cache?
   325         2          8.0      4.0      0.0          glob.players[p.token] = p
   326         2          6.0      3.0      0.0          glob.players_name[p.name] = p
   327         2          8.0      4.0      0.0          glob.players_id[p.id] = p
   328         7         21.0      3.0      0.0          for o in glob.players.values(): # enqueue other users to client
   329         5        632.0    126.4      0.1              o.enqueue((packets.userPresence(p) + packets.userStats(p))) # enqueue this user to every other logged in user
   330         5        583.0    116.6      0.1              data += (packets.userPresence(o) + packets.userStats(o)) # enqueue every other logged in user to this user
   331                                           
   332         2         22.0     11.0      0.0          elapsed = round((time.time() - start) * 1000, 2)
   333         2         70.0     35.0      0.0          data += packets.notification(f'Welcome to Asahi v{glob.version}\n\nTime Elapsed: {elapsed}ms') # send notification as indicator they've logged in i guess
   334         2          8.0      4.0      0.0          if glob.config.debug:
   335         2        537.0    268.5      0.1              log(f'{p.name} successfully logged in. | Time Elapsed: {elapsed}ms', Ansi.LBLUE)
   336                                           
   337         2        260.0    130.0      0.0          resp = await make_response(bytes(data))
   338         2         47.0     23.5      0.0          resp.headers['cho-token'] = token
   339         2          5.0      2.5      0.0          return resp
   340                                               
   341                                               # if we have made it this far then it's a reconnect attempt with token already provided
   342         9        108.0     12.0      0.0      user_token = headers['osu-token'] # client-provided token
   343         9         41.0      4.6      0.0      if not (p := glob.players.get(user_token)):
   344                                                   # user is logged in but token is not found? most likely a restart so we force a reconnection
   345         4         40.0     10.0      0.0          return packets.restartServer(0)
   346                                           
   347         5         98.0     19.6      0.0      body = await request.body
   348                                           
   349                                               # handle any packets the client has sent
   350         7        172.0     24.6      0.0      for packet in BanchoPacketReader(body, glob.packets):
   351         2        153.0     76.5      0.0          await packet.handle(p)
   352         2          8.0      4.0      0.0          if glob.config.debug and packet.type != 18: # stop spectator frames from printing as it floods console
   353         2        783.0    391.5      0.1              log(f'Handled packet {packet.type!r}', Ansi.LBLUE)
   354                                            
   355         5         17.0      3.4      0.0      data = bytearray()
   356        15         63.0      4.2      0.0      while not p.queue_empty():
   357        10         45.0      4.5      0.0          data += p.dequeue()
   358                                           
   359         5        507.0    101.4      0.1      resp = await make_response(bytes(data))
   360         5         85.0     17.0      0.0      resp.headers['Content-Type'] = 'text/html; charset=UTF-8' # ?
   361         5         15.0      3.0      0.0      return resp

